/** Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef SRC_COMMON_UTIL_UUID_H_
#define SRC_COMMON_UTIL_UUID_H_

#include <immintrin.h>
#include <x86intrin.h>

#include <limits>
#include <string>

namespace vineyard {

/**
 * @brief ObjectID is an opaque type for vineyard's object id. The object ID is
 * generated by vineyard server, the underlying type of ObjectID is a 64-bit
 * unsigned integer.
 */
using ObjectID = uint64_t;

/**
 * @brief ObjectID is an opaque type for vineyard's instance ID id. The
 * underlying type of ObjectID is a 64-bit unsigned integer.
 */
using InstanceID = uint64_t;

// blob id: 1 + memory address (in vineyardd)
// non-blob id: 0 + random (rdstc)

inline void* GetBlobAddr(ObjectID const id) {
  return (id & 0x8000000000000000UL)
             ? reinterpret_cast<void*>(id & 0x7FFFFFFFFFFFFFFFUL)
             : nullptr;
}

inline ObjectID GenerateBlobID(const void* ptr) {
  return 0x8000000000000000UL | reinterpret_cast<uint64_t>(ptr);
}

constexpr inline ObjectID EmptyBlobID() { return 0x8000000000000000UL; }

inline ObjectID GenerateObjectID() {
  return 0x7FFFFFFFFFFFFFFFUL & static_cast<uint64_t>(__rdtsc());
}

inline bool IsBlob(ObjectID id) { return id & 0x8000000000000000UL; }

const std::string VYObjectIDToString(const ObjectID id);

ObjectID VYObjectIDFromString(const std::string& s);

ObjectID VYObjectIDFromString(const char* s);

inline ObjectID InvalidObjectID() {
  return std::numeric_limits<ObjectID>::max();
}

inline InstanceID UnspecifiedInstanceID() {
  return std::numeric_limits<InstanceID>::max();
}

}  // namespace vineyard

#endif  // SRC_COMMON_UTIL_UUID_H_
